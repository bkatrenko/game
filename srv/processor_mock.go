package main

import (
	testing "testing"

	mock "github.com/stretchr/testify/mock"
)

// Processor is an autogenerated mock type for the Processor type
type ProcessorMock struct {
	mock.Mock
}

// HandleIncomingWorldState provides a mock function with given fields: upcomingState
func (_m *ProcessorMock) HandleIncomingWorldState(upcomingState State) (State, error) {
	ret := _m.Called(upcomingState)

	var r0 State
	if rf, ok := ret.Get(0).(func(State) State); ok {
		r0 = rf(upcomingState)
	} else {
		r0 = ret.Get(0).(State)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(State) error); ok {
		r1 = rf(upcomingState)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Join provides a mock function with given fields: joinRequest
func (_m *ProcessorMock) Join(joinRequest JoinGame) (State, error) {
	ret := _m.Called(joinRequest)

	var r0 State
	if rf, ok := ret.Get(0).(func(JoinGame) State); ok {
		r0 = rf(joinRequest)
	} else {
		r0 = ret.Get(0).(State)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(JoinGame) error); ok {
		r1 = rf(joinRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StartGameEngine provides a mock function with given fields:
func (_m *ProcessorMock) StartGameEngine() {
	_m.Called()
}

// NewProcessorMock creates a new instance of Processor. It also registers the testing.TB interface on the mock and a cleanup function to assert the mocks expectations.
func NewProcessorMock(t testing.TB) *ProcessorMock {
	mock := &ProcessorMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
